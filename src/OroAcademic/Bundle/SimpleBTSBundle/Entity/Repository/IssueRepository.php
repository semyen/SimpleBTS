<?php

namespace OroAcademic\Bundle\SimpleBTSBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper;
use Oro\Bundle\WorkflowBundle\Entity\WorkflowStep;
use OroAcademic\Bundle\SimpleBTSBundle\Entity\Issue;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * IssueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IssueRepository extends EntityRepository
{
    /**
     * @param Issue $issue
     * @return bool
     */
    public function update(Issue $issue)
    {
        if (!empty($issue)) {
            if (empty($issue->getCode())) {
                $issue->setCode($issue->getOrganization()->getName() . '-' . $issue->getId());
            }
            $entityManager = $this->getEntityManager();
            $entityManager->persist($issue);
            $entityManager->flush();

            return true;
        }

        return false;
    }

    /**
     * @param Issue $issue
     * @return bool
     */
    public function delete(Issue $issue)
    {
        if (!empty($issue)) {
            $entityManager = $this->getEntityManager();
            $entityManager->remove($issue);
            $entityManager->flush();

            return true;
        }

        return false;
    }

    /**
     * Returns top $limit opportunities grouped by lead source
     *
     * @param  AclHelper $aclHelper
     * @param array $workflowSteps
     * @return array     [count, label]
     */
    public function getIssueByStatus(AclHelper $aclHelper, $workflowSteps)
    {
        $result = [];

        $queryBuilder = $this->createQueryBuilder('i')
            ->select('w.name AS label', 'COUNT(i.id) AS cnt')
            ->Join('i.workflowStep', 'w')
            ->groupBy('label')
        ;

        $rows = $aclHelper->apply($queryBuilder)->getArrayResult();

        if (!empty($workflowSteps) && !empty($rows)) {
            foreach ($workflowSteps as $workflowStep) {
                $count = 0;
                foreach ($rows as $row) {
                    /** @var WorkflowStep $workflowStep */
                    if (!empty($row['label'] == $workflowStep->getName())) {
                        $count = $row['cnt'];
                    }
                }
                $result[$workflowStep->getName()] = [
                    'label' => $workflowStep->getLabel(),
                    'count' => $count
                ];
            }
        }

        return $result;
    }
}
